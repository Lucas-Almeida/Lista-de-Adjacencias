// Grafos - DFS (busca em profundidade)

#include <iostream>
#include <list>
#include <algorithm> // função find
#include <stack> // pilha para usar na DFS

using namespace std;

class Grafo {
    int V; // numero de vertices
    list<int> *adj; // ponteiro para um array contendo as listas de adjacencias

public:
    Grafo(int V); //Construtor
    void adicionaAresta(int v1, int v2); // adiciona uma aresta no grafo

    // faz uma DFS a partir de um vertice
    void dfs(int v);
};

Grafo::Grafo(int V){
    this->V = V; //atribui o numero de vertices
    adj = new list<int>[V]; // cria as listas
}

void Grafo::adicionaAresta(int v1, int v2){

    // adiciona vertice v2 a lista de vertices adjacentes de v1
    adj[v1].push_back(v2);
}

void Grafo::dfs(int v){

    stack<int> pilha;
    bool visitados[V]; // vetor de visitados

    //marca todos como nao visitados
    for(int i = 0; i < V; i++)
        visitados[i] = false;


    while(true){
        if(!visitados[v]){
            cout << "Visitando vertice " << v << "...\n";
            visitados[v] = true; // marca como visitado
            pilha.push(v); // insere "v" na pilha
        }

        bool achou = false;
        list<int>::iterator it;


        // busca por um vizinho nao visitado
        for(it = adj[v].begin(); it != adj[v].end(); it++){
            if(!visitados[*it]){
                achou = true;
                break;
            }
        }
        if(achou)
            v = *it;
        else{
            // se todos os visinhos estao visitados ou nao existem vizinhos
            //remove da pilha
            pilha.pop();
            // se a pilha ficar vazia, entao terminou a busca
            if(pilha.empty())
                break;
            // se chegou aqui é pq pode pegar elemento do topo
            v = pilha.top();
        }
    }
}


int main()
{

int V, first;
 cout << "Busca DFS em lista de adjacencias\n" << endl;
 cout << "Insira o numero total de vertices do grafo: ";
 cin >> V;
 cout << "Primeira aresta do grafo: ";
 cin >> first;
 cout <<  "Indicação das arestas do grafo:" << endl;
 cout << "_________________________________________" << endl;

 int temp = 1;
 int a, b;
 Grafo grafo(V);
 while(temp == 1){
    cout << "Saida da aresta: ";
    cin >> a;
    cout << "Chegada da aresta: ";
    cin >> b;
    grafo.adicionaAresta(a,b);

    cout << "Deseja adicionar outra aresta? 1 para SIM/ 2 para NAO" << endl;
    cin >> temp;

 }

    cout << "Percorrendo em profundidade o grafo \n:"
    grafo.dfs(first);


    return 0;
}
